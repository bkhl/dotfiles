#+TITLE: Emacs Configuration
#+AUTHOR: Björn Lindström
#+EMAIL: bkhl@elektrubadur.se
#+STARTUP: overview

* Introduction

This is my Emacs configuration. Inspirations include:

- [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Harry R. Schwart's Emacs configuration]]
- [[https://emacscast.org/][EmacsCast]]

* Set personal information

#+begin_src emacs-lisp
(setq user-full-name "Björn Lindström"
      user-mail-address "bkhl@elektrubadur.se"
      calendar-latitude 13.76
      calendar-longitude 100.54
      calendar-location-name "Bangkok")
#+end_src

* Use =sensible-defaults.el=

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+begin_src emacs-lisp
(load-file
 (concat user-emacs-directory
         "sensible-defaults.el/sensible-defaults.el"))
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+end_src

* Look and feel
** Load Modus Operandi theme

#+begin_src emacs-lisp
(use-package modus-operandi-theme
  :custom
  (modus-operandi-theme-faint-syntax t)
  (modus-operandi-theme-org-blocks 'greyscale)
  (modus-operandi-theme-scale-headings t)
  (modus-operandi-theme-links 'neutral-underline)
  (modus-operandi-theme-diffs 'desaturated)
  :config
  (load-theme 'modus-operandi t))
#+end_src

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default
                    nil :family "Julia Mono" :height 110)
(set-face-attribute 'variable-pitch
                    nil :family "Vollkorn" :height 1.1)
(set-face-attribute 'fixed-pitch
                    nil :family "Julia Mono" :height 1.0)
#+end_src

** Highlight current line

#+begin_src emacs-lisp
(hl-line-mode 1)
#+end_src

** Render =lambda= as =λ=

#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
#+end_src

** Hide minor modes with =minions=

#+begin_src emacs-lisp
(use-package minions
  :config
  (setq minions-mode-line-lighter ""
		minions-mode-line-delimiters '("" . ""))
  (minions-mode 1))
#+end_src

** Disable bell

Disable warning bell, both the default audio one and the visual one otherwise enabled by =sensible-defaults.el=.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Show loading time on startup

#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Emacs init time: %s" (emacs-init-time)))
#+end_src

** Set window title

Set window title including current buffer or filename, and either the hostname
if the server name is "server", or otherwise the server name. This is in order
to show in which [[https://github.com/containers/toolbox][Toolbox]] container an Emacs server is running.

Also show in the window title if the current buffer has been modified.

#+begin_src emacs-lisp
(setq frame-title-format
      '(
        "%b"
        (:eval (if (buffer-modified-p) " ⁓ " " — "))
        (:eval (if (string= server-name "server")
                   (system-name)
                 server-name))))
#+end_src

* =emacsclient= configuration
** Raise new =emacsclient= frames when created

#+begin_src emacs-lisp
(cl-flet ((focus-frame ()
                       (select-frame-set-input-focus (selected-frame))))

      (add-hook 'server-switch-hook #'focus-frame)
      (add-hook 'server-after-make-frame-hook #'focus-frame))
#+end_src

** Help use =emacsclient= as =$EDITOR=

This library adds ability for =emacsclient= used as =$EDITOR= in child processes
to more reliably pick the parent Emacs process as the server.

It also adds a way for remote processes to communicate via input/output instead
of a socket.

#+begin_src emacs-lisp
(use-package with-editor)
#+end_src

This enables use of the library in Emacs terminals/shells.

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook  'with-editor-export-editor)
(add-hook 'term-exec-hook   'with-editor-export-editor)
(add-hook 'eshell-mode-hook 'with-editor-export-editor)
#+end_src

* Key bindings and navigation
** Load Hydra key binding library

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** Disable =C-z=

Disabling =C-z=, which normally minimizes the window, which is rather distracting.

#+begin_src emacs-lisp
(unbind-key "C-z")
#+end_src

** Managing windows

Use  =M-o= to enable a Hydra for moving between or manipulating windows.

#+begin_src emacs-lisp
(defhydra bkhl/hydra-other-window
  (global-map "M-o" :foreign-keys nil)

  "Switch between windows"

  ("M-o" other-window)

  ("<left>" windmove-left)
  ("b" windmove-left)

  ("<right>" windmove-right)
  ("f" windmove-right)

  ("<up>" windmove-up)
  ("p" windmove-up)

  ("<down>" windmove-down)
  ("n" windmove-down)

  ("k" delete-window "delete window" :color blue)
  ("0" delete-window :color blue)

  ("h" split-window-below "split horizontal" :color blue)
  ("2" split-window-below :color blue)

  ("v" split-window-right "split vertical" :color blue)
  ("3" split-window-right :color blue)

  ("1" delete-other-window :color blue))
#+end_src

** Start with an empty scratch buffer.

#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      initial-scratch-message "")
#+end_src

** Use =ivy= and =counsel= for completion and searching

Ivy is a generic completion and selection framework. This also replaces the
standard binding =C-s= to search within a file with =swiper=, which comes with
Ivy.

#+begin_src emacs-lisp
(use-package ivy
  :demand t
  :custom
  (ivy-initial-inputs-alist nil)
  :config
  (ivy-mode 1)
  :bind
  ("C-s" . swiper))
#+end_src

Councel adds replacement for additional Emacs commands based on Ivy.

#+begin_src emacs-lisp
(use-package counsel
  :config
  (counsel-mode 1)
  :bind
  ("C-c g" . counsel-git))
#+end_src

* General text editing
** Disable indentation using tabs.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Set default indentation width to 4.

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

** Show character name in character description

When using =C-x == to look up the character under the point, also show Unicode
character name.

#+begin_src emacs-lisp
(setq what-cursor-show-names t)
#+end_src

** Automatically pair matching characters like parenthesis

Enable =electric-pair-mode=, which enables automatic insert of matching characters for example for parentheses.

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

* Project management and version control
** Projectile project management

Load the Projectile project management package.

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

Load the =counsel-projectile= plugin for improved completion in Projectile.

#+begin_src emacs-lisp
(use-package counsel-projectile
  :after projectile
  :ensure t
  :config
  (counsel-projectile-mode))
#+end_src

This allows setting a value in a =.dir-locals.el= to make Projectile list only
files that are tracked in the Git repository.

#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values
             '(projectile-git-command . "git ls-files -zc --exclude-standard"))
#+end_src

** Magit Git integration

Load =magit=, for working with Git.

#+begin_src emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :custom
  (magit-push-always-verify nil)
  (git-commit-summary-max-length 50))
#+end_src

** =git-timemachine= for browsing file history

#+begin_src emacs-lisp
(use-package git-timemachine
  :after magit
  :hook magit)
#+end_src

** Make =vc-diff= imitate the diff format of Magit

#+begin_src emacs-lisp
(setq diff-font-lock-prettify t)
#+end_src

* Programming

Treat words in camel case symbols as separate when editing.

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

Automatically scroll to new output in the =*compilation*= buffer.

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src

** Multi-purpose programming packages
*** Language Server Protocol with =lsp-mode=
#+begin_src emacs-lisp
(use-package lsp-mode)
#+end_src

*** Completion with =company=

#+begin_src emacs-lisp
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (bind-key "M-/" 'company-complete-common))
#+end_src

** Programming languages
*** Rust

Use =rustic= for Rust editing.

#+begin_src emacs-lisp
(use-package rustic
  :after (lsp-mode company)
  :custom
  (rustic-format-trigger 'on-save))
#+end_src

Auto-format Rust code on save.

* Writing
** =org-mode= planning and note-taking

As an exception to the rule in this file, =org-mode= is not called with =use-package=, because it has so much configuration that it warrants splitting it into sections, and it has implicitly been loaded before running this file, given that this configuration itself is written in =org-mode=.

*** Key bindings

Keybinding to open an agenda view.

#+begin_src emacs-lisp
(bind-key "C-c a" 'org-agenda)
#+end_src

*** =TODO= keywords

Customizing =TODO= keywords adding my own state =READ=, which is for things to
read and possibly make notes on or file.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t)" "READ(r)"
         "|"
         "DONE(d)" "CANCELLED(c)")))
#+end_src

*** Directories

Set a custom variable for the notes directory, so that it can be referred to
later.

#+begin_src emacs-lisp
(setq bkhl/org-directory "~/Documents/Notes/")
#+end_src

Search all files in the notes directory when creating agendas.

#+begin_src emacs-lisp
(setq org-agenda-files `(,bkhl/org-directory))
#+end_src

*** Make initial scratch buffer use =org-mode=

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

*** Editing

Edit src blocks in current window.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Make indentation and fonts in code blocks work according to mode for the language in the block.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t
      org-src-fontify-natively t)
#+end_src

Disable the extra indentation in src blocks.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

This prevents accidental editing in invisible regions.

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'error)
#+end_src

Shortcut for inserting a block of Elisp.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

*** Display

Enable =org-indent= mode, which makes org-mode indent sections visually, but not in the saved files.

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Use variable fonts in =org-mode= buffers.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

Display bullets instead of asterisks.

#+begin_src emacs-lisp
(use-package org-superstar
  :init
  (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

Hide the characters surrounding emphasized phrases

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Use the Thai ellipsis character, ไปยาลน้อย.

#+begin_src emacs-lisp
(setq org-ellipsis " ฯ")
#+end_src

*** Capturing

Add templates for use by =org-capture=

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i" "inbox" entry (file ,(concat bkhl/org-directory "Inbox.org"))
         "* TODO %?")))
#+end_src

Bind =C-c c= to =org-capture= to quickly add notes.

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
#+end_src

*** Refiling

This allows refiling within the current buffer, or any agenda files.

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9))
      org-outline-path-complete-in-steps nil
      org-refile-use-outline-path 'file)
#+end_src

** Prose writing environment with Olivetti

A minor mode that automatically adjusts margins &c. for prose writing.

#+begin_src emacs-lisp
(use-package olivetti
  :config
  (add-hook 'org-mode-hook '(lambda () (olivetti-mode 1))))
#+end_src

* Other file formats
** hledger

#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.journal\\'"
  :custom
  (ledger-post-auto-align nil)
  :config
  (setq ledger-mode-should-check-version nil
        ledger-report-links-in-register nil
        ledger-binary-path "hledger"
        ledger-default-date-format ledger-iso-date-format))
#+end_src
