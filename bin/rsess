#!/usr/bin/env python3

import getpass
import sys
import tempfile

from plumbum import ProcessExecutionError, SshMachine, cli, local
from plumbum.cmd import autossh, mosh, rsync
from plumbum.path.utils import delete


class RSess(cli.Application):
    session = cli.SwitchAttr(
        ["-s", "--session"], default=getpass.getuser(), help="session name"
    )

    def main(self, destination):
        remote_user, remote_host = parse_destination(destination)

        temp_dir = local.path(tempfile.mkdtemp(prefix="home."))
        temp_dir.chmod(0o755)
        self.temp_dir = temp_dir

        temp_bin_dir = temp_dir / "bin"
        temp_bin_dir.mkdir()
        temp_bin_dir.chmod(0o755)

        for filename in [
            ".bash_profile",
            ".bashrc",
            ".gitconfig",
            ".inputrc",
            ".profile",
            ".tmux.conf",
            ".vimrc",
            "bin/tmux",
        ]:
            (local.env.home / filename).symlink(temp_dir / filename)

        remote = SshMachine(remote_host, user=remote_user)
        remote_home = remote.env.home / self.session

        script = f"""#!/bin/sh
export REAL_HOME="${{HOME}}"
export HOME="{remote_home}"
if [ ! -e "${{HOME}}/.ssh" ]; then
    ln -sT "${{REAL_HOME}}/.ssh" "${{HOME}}/.ssh"
fi
cd "${{HOME}}"
exec bin/tmux new-session -A -s "{self.session}"
"""
        my_tmux = temp_bin_dir / "my-tmux"
        my_tmux.write(script)
        my_tmux.chmod(0o755)

        rsync(
            "--archive", "--copy-links", f"{temp_dir}/", f"{destination}:{remote_home}"
        )

        delete(self.temp_dir)

        remote_my_tmux = remote_home / "bin" / my_tmux.name
        remote_mosh_unsuccessful = remote_home / ".mosh_unsuccessful"

        if not remote_mosh_unsuccessful.exists():
            try:
                ((mosh < sys.stdin) > sys.stdout)(destination, remote_my_tmux)
                return
            except ProcessExecutionError:
                remote_mosh_unsuccessful.touch()

        ((autossh < sys.stdin) > sys.stdout)("-t", destination, remote_my_tmux)


def parse_destination(destination):
    parts = destination.split("@")
    if len(parts) == 1:
        return None, parts[0]
    elif len(parts) == 2:
        return parts[0], parts[1]
    else:
        raise ValueError("invalid destination format")


if __name__ == "__main__":
    RSess.run()
