#+TITLE: Emacs Configuration
#+AUTHOR: Björn Lindström
#+EMAIL: bkhl@elektrubadur.se
#+STARTUP: overview

* Introduction

This is my Emacs configuration. Inspirations include:

- Harry R. Schwart's [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Emacs configuration]] and [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].
- Phil Hagelberg's [[https://git.sr.ht/~technomancy/better-defaults][better-defaults.el]].
- [[https://emacscast.org/][EmacsCast]].
- Protesilaos Stavrou's [[https://protesilaos.com/codelog/][blog]] and [[https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g][videos]].

Here is [[https://www.emacswiki.org/emacs/bkhl][my home page on EmacsWiki]].

* Set personal information

#+begin_src emacs-lisp
(setq user-full-name "Björn Lindström"
      user-mail-address "bkhl@elektrubadur.se")
#+end_src

* User interface
** Load Modus Operandi theme

#+begin_src emacs-lisp
(use-package modus-themes
  :custom
  (modus-themes-bold-constructs t)
  (modus-themes-italic-constructs t)
  (modus-themes-syntax 'faint)
  (modus-themes-mixed-fonts t)
  (modus-themes-links 'neutral-underline)
  (modus-themes-diffs 'desaturated)
  (modus-themes-org-blocks 'gray-background)
  (modus-themes-scale-headings t)
  :config
  (load-theme 'modus-operandi t))
#+end_src

** Enable syntax highlighting everywhere

#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

** Fonts

Setting fonts. I primarily use the ~variable-pitch~ and ~fixed-pitch~ faces in ~org-mode~.

#+begin_src emacs-lisp
(defvar bkhl/default-text-height 130)

(set-face-attribute 'default nil
                    :family "Iosevka BKHL Default"
                    :height bkhl/default-text-height)
(set-face-attribute 'variable-pitch nil
                    :family "Crimson Pro"
                    :height (/ 1.5 1.3))
(set-face-attribute 'fixed-pitch nil
                    :family "Iosevka BKHL Default"
                    :height (/ 1.3 1.5))
#+end_src

Enable Emoji font if available. ☃

This is run as a hook after the first frame is created, as this will otherwise not work when Emacs is started in daemon mode, or by ~emacsclient~.

#+begin_src emacs-lisp
(add-hook
 'server-after-make-frame-hook
 (defun bkhl/set-fontset-fonts ()
   (set-fontset-font t 'symbol "Noto Color Emoji")
   (set-fontset-font t ?฿ "Iosevka BKHL Default")
   (remove-hook 'server-after-make-frame-hook
                'bkhl/set-fontset-fonts)))
#+end_src

Hide the ~buffer-face-mode~ ligher.

#+begin_src emacs-lisp
(use-package face-remap
  :diminish buffer-face-mode)
#+end_src

** Customize mode line

Enable smart-mode-line

#+begin_src emacs-lisp
(use-package smart-mode-line
  :config
  (sml/setup))
#+end_src

Show line and column number in mode line.

#+begin_src emacs-lisp
(line-number-mode)
(column-number-mode)
#+end_src

** Render some keywords as symbols

This primarily makes =lambda= get rendered as =λ= in Emacs Lisp, but can also be enabled in other modes.

#+begin_src emacs-lisp
(global-prettify-symbols-mode)
#+end_src

** Disable bell

Disable warning bell, both the default audio one and the visual one otherwise enabled by =sensible-defaults.el=.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Show loading time on startup

#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Emacs init time: %s" (emacs-init-time)))
#+end_src

** Set window title

Set window title including current buffer or filename, along with system name. Use a straight or squiggly line to show if the buffer has modifications.

#+begin_src emacs-lisp
(setq frame-title-format
      '(
        "%b"
        (:eval (if (buffer-modified-p) " ⁓ " " — "))
        (:eval (system-name))))
#+end_src

** Highlight matching pairs of parentheses.

#+begin_src emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+end_src

** Make yes/no prompts shorter

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Prompt before closing Emacs

#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Make middle-clicking mouse yank at point

#+begin_src emacs-lisp
(setq mouse-yank-at-point t)
#+end_src

** Key bindings to change global font scale

#+begin_src emacs-lisp
(defvar bkhl/current-text-height bkhl/default-text-height)

(defun bkhl/revert-text-height ()
  (interactive)
  (set-face-attribute 'default nil :height bkhl/default-text-height)
  (setq bkhl/current-text-height (face-attribute 'default :height))
  (message "Font size reverted to %d" bkhl/current-text-height))

(defun bkhl/increase-text-height ()
  (interactive)
  (set-face-attribute 'default nil :height (+ bkhl/current-text-height 10))
  (setq bkhl/current-text-height (face-attribute 'default :height))
  (message "Font size increased to %d" bkhl/current-text-height))

(defun bkhl/decrease-text-height ()
  (interactive)
  (set-face-attribute 'default nil :height (- bkhl/current-text-height 10))
  (setq bkhl/current-text-height (face-attribute 'default :height))
  (message "Font size decreased to %d" bkhl/current-text-height))

(bind-key "C-)" #'bkhl/revert-text-height)
(bind-key "C-+" #'bkhl/increase-text-height)
(bind-key "C-_" #'bkhl/decrease-text-height)
#+end_src

** Set preferred dateformat

#+begin_src emacs-lisp
(calendar-set-date-style 'iso)
#+end_src

** Highlight current line

#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Flash frame on errors

#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

** Make ediff use existing frame instead of creating new one

#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

* Configure ~emacsclient~ bevaviour

Give new ~emacsclient~ frames focus when created

#+begin_src emacs-lisp
  (defun bkhl/focus-frame ()
    (select-frame-set-input-focus (selected-frame)))
  (add-hook 'server-switch-hook 'bkhl/focus-frame)
  (add-hook 'server-after-make-frame-hook 'bkhl/focus-frame)
#+end_src

* File/buffer handling
** Start with an empty scratch buffer.

#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      initial-scratch-message nil)
#+end_src

** Use directory name in buffer names for files with same name

#+begin_src emacs-lisp
(use-package uniquify
  :straight nil
  :custom (uniquify-buffer-name-style 'forward))
#+end_src

** Start opening files from home directory

Unless overridden by a buffer, when prompting to open a file, start in the home directory.

#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src

** Store backups in tmp directory

Store backups and autosaves in ~temporary-file-directory~. This risks losing some data on a system crash, but I am not very concerned about that as generally my important files are in some kind of version control.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

** Automatically sync updated files

If a file changes, automatically refresh buffers containing the file, so that it doesn't get out of sync.

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Trim trailing spaces and enforce final newline

~trimspace-mode~ sets things up so that when a file is opened, it enables deleting trailing whitespace and newlines before saving the file, unless the file when first opened already has traling whitespace of each type.

#+begin_src emacs-lisp
(use-package trimspace-mode
  :straight (:type git :host gitlab :repo "bkhl/trimspace-mode")
  :hook
  (prog-mode . trimspace-mode-unless-trailing-whitespace)
  (text-mode . trimspace-mode-unless-trailing-whitespace))
#+end_src

** Offer to create parent directories on save

When saving a file to a directory that doesn't exist, offer to create it.

#+begin_src emacs-lisp
(add-hook
 'before-save-hook
 (defun bkhl/ask-create-directory ()
   (when buffer-file-name
     (let ((dir (file-name-directory buffer-file-name)))
       (when
           (and
            (not (file-exists-p dir))
            (y-or-n-p
             (format
              "Directory %s does not exist. Create it?"
              dir)))
         (make-directory dir t))))))
#+end_src

* Key bindings and navigation
** Disable =C-z=

Disabling =C-z=, which normally minimizes the window, which is rather distracting.

#+begin_src emacs-lisp
(unbind-key "C-z")
#+end_src

** Bind Home/End to move to start/end of line

#+begin_src emacs-lisp
(global-set-key (kbd "<home>") 'move-beginning-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)
#+end_src

** Incremental narrowing/completion commands

[[https://github.com/minad/vertico][Vertico]] is a library for completion, which connects to existing Emacs functionality to improve completion in the minibuffer.

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode))
#+end_src

[[https://github.com/oantolin/orderless][Orderless]] adds a completion style that allows typing components of a canditate out of order.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

Do not allow the cursor in the minibuffer prompt.

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

Enable recursive minibuffers.

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Hide commands in M-x which do not work in the current mode. Vertico commands are hidden in normal buffers.

#+begin_src emacs-lisp
(setq read-extended-command-predicate
      #'command-completion-default-include-p)
#+end_src

** Marginalia for adding information to minibuffer  completions

#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src

** Use =C-S-f= to expand region

This package allows first selecting the word the current pointer is on, and then by repeating the key press grow the selection to the next larger structure.

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-S-w" . er/expand-region))
#+end_src

** Change behaviour of ~M-z~ for zapping to character

Make ~M-z~ kill characters up to the character /before/ the next occurrence of the selected character, instead of including it, which is generally more useful.

#+begin_src emacs-lisp
(use-package misc
  :straight nil
  :commands zap-up-to-char
  :bind ("M-z" . zap-up-to-char))
#+end_src

** Preserve ~M-x~ command history between sessions

#+begin_src emacs-lisp
(use-package savehist
  :config
  (savehist-mode))
#+end_src

** Make ~apropos~ search more extensively

#+begin_src emacs-lisp
(setq setqapropos-do-all t)
#+end_src

** Enable visual browsing of kill ring

This binds ~M-y~ (when not preceeded by ~C-y~) to a mode for viewing and selecting entries from the kill ring.

#+begin_src emacs-lisp
(use-package browse-kill-ring
  :config (browse-kill-ring-default-keybindings))
#+end_src

** Use saved point position in previously opened files

#+begin_src emacs-lisp
(use-package saveplace
  :config (save-place-mode))
#+end_src

** Allow undo of window layout changes

#+begin_src emacs-lisp
(use-package winner
  :config (winner-mode))
#+end_src

** Use ~which-key~ to show key binding hints

#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config (which-key-mode))
#+end_src

** Navigation between windows

Bind ~M-o~ (by default bound to a rarely used command) to ~other-window~.

#+begin_src emacs-lisp
(bind-key "M-o" 'other-window)
#+end_src

Enable navigation between windows with ~S-<direction>~, adding some configuration to make this conflict less with ~org-mode~.

#+begin_src emacs-lisp
(use-package windmove
  :config
  (windmove-default-keybindings)
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right))
#+end_src

* Remote editing with TRAMP

The custom ~:pre-build~ command is a workaround for  [[https://github.com/raxod502/straight.el/issues/236][raxod502/straight.el/issues/236]].

#+begin_src emacs-lisp
(use-package tramp
  :straight (tramp :build t :pre-build (("make" "autoloads")))
  :custom (enable-remote-dir-locals t)
  :config (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

* General text editing
** Highlight selected region and apply changes to it

Highlight the region when the mark is active.

#+begin_src emacs-lisp
(transient-mark-mode t)
#+end_src

Set it so that if a selection is active, typed text will replace the selection.

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** Disable indentation using tabs.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Set default line length to 80

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

** Set default indentation width to 4.

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

** Show character name in character description

When using =C-x == to look up the character under the point, also show Unicode
character name.

#+begin_src emacs-lisp
(setq what-cursor-show-names t)
#+end_src

** Automatically pair matching characters like parenthesis

Enable ~electric-pair-mode~, which enables automatic insert of matching characters for example for parentheses.

#+begin_src emacs-lisp
(electric-pair-mode)
#+end_src

** Enable ~yasnippet~

#+begin_src emacs-lisp
(use-package yasnippet)
#+end_src

** Operate on the current line if no region is active

This module allows a number of functions to operate on the current line if no region is selected.

#+begin_src emacs-lisp
(use-package whole-line-or-region
  :diminish whole-line-or-region-local-mode
  :config (whole-line-or-region-global-mode))
#+end_src

** Save existing clipboard text into kill ring before replacing it

Prevents killing text in Emacs from irrevocably deleting things from the system clipboard.

#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

* Project management and version control
** Magit Git integration

Load ~magit~, for working with Git.

#+begin_src emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :commands
  magit-call-git

  :custom
  (magit-push-always-verify nil)
  (git-commit-summary-max-length 50))
#+end_src

** Automatic commit on save

Function to do automatic commit on save in certain repos. This is for use with for example ~org-mode~, to enable finding things after accidental changes.

#+begin_src emacs-lisp
(defun bkhl/magic-commit-current-buffer()
  (magit-call-git "add" buffer-file-name)
  (magit-call-git "commit"
                  "-m"
                  (format "Automatic commit on save of %s"
                          buffer-file-name))
  (magit-refresh))
#+end_src

To use this as an ~after-save-hook~ in a project, create a ~.dir-locals.el~ with something like this:

#+begin_example
((org-mode . ((eval . (add-hook
                       'after-save-hook
                       'bkhl/magic-commit-current-buffer
                       nil t)))))
#+end_example

** Show uncommited changes in fringe

Load ~diff-hl~ which shows uncommited changes in the left-hand fringe.

#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)
  (add-hook 'magit-pre-refresh-hook
            'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook
            'diff-hl-magit-post-refresh))
#+end_src

** ~git-timemachine~ for browsing file history

#+begin_src emacs-lisp
(use-package git-timemachine
  :after magit
  :hook magit)
#+end_src

** Make ~vc-diff~ imitate the diff format of Magit

#+begin_src emacs-lisp
(setq diff-font-lock-prettify t)
#+end_src

** Allow remembering risky local variables

This overrides the Emacs settings that enforces having to accept local variables matching certain patterns every time they are used.

#+begin_src emacs-lisp
(advice-add 'risky-local-variable-p :override #'ignore)
#+end_src

* Programming
** In programming modes, treat words in camel case symbols as separate.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

** Add keybinding to comment/uncomment line or region

#+begin_src emacs-lisp
(defun bkhl/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))


(global-set-key (kbd "M-;")
                'bkhl/comment-or-uncomment-region-or-line)
#+end_src

** Automatically scroll to new output in the =*compilation*= buffer.

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src

** Multi-purpose programming packages
*** Diagnostics with ~flymake~

#+begin_src emacs-lisp
(use-package flymake
  :bind
  (:map flymake-mode-map
   ("M-n" . flymake-goto-next-error)
   ("M-p" . flymake-goto-prev-error)))
#+end_src

*** Language Server Protocol with ~eglot~

#+begin_src emacs-lisp
(use-package eglot
  :commands (eglot eglot-ensure)
  :config
  (bind-key "C-c l f" 'eglot-format eglot-mode-map)
  (bind-key "C-c l r" 'eglot-rename eglot-mode-map))
#+end_src

This enables the [[https://github.com/joaotavora/eglot][Eglot]] LSP client. This will usually require some additional per-project settings to work. As an example, for Python projects I tend to do soemthing like this:

+ install the Pip packages ~python-lsp-server[pylint]~,  ~pyls-black~ and ~pyls-isort~.
+ add a ~Makefile~ that lets me start an LSP in the correct environment with ~make lsp~.
+ have a ~.dir-locals.el~ file like the below example, which will:
  + set it to use the make target to start the LSP server.
  + make Eglot pass configuration to the LSP sever to enable Pylint.
  + use Eglot's formatting command to format buffers (with Black), before saving.
  + enable Eglot automatically when opening Python buffers.

#+begin_example emacs-lisp
((python-mode
  . ((eglot-server-programs . ((python-mode . ("make" "lsp"))))
     (eglot-workspace-configuration . ((:pyls
                                       . (:plugins (:pylint (:enabled t))))))
     (eval
      . (progn
          (add-hook 'before-save-hook #'eglot-format-buffer nil t)
          (eglot-ensure))))))
#+end_example

*** Completion with ~company~

#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (bind-key "M-/" 'company-complete-common))
#+end_src

Use the ~company-posframe~ plugin to show the ~company~ menus in a separate frame, not affected by e.g. variable pitch mode.

#+begin_src emacs-lisp
(use-package company-posframe
  :diminish company-posframe-mode
  :custom (company-posframe-show-indicator nil)
  :hook (company-mode . company-posframe-mode))
#+end_src

Use [[https://github.com/raxod502/prescient.el][Prescient]] to sort alternatives in Company.

#+begin_src emacs-lisp
(use-package company-prescient
  :config (company-prescient-mode))
#+end_src

** Programming languages
*** Dockerfile

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode ("\\'Dockerfile\\.?" . dockerfile-mode))
#+end_src

*** Emacs Lisp

=el2org= can convert Elisp comments to an Org file.

#+begin_src emacs-lisp
(use-package el2org
  :custom
  (el2org-default-backend 'org)
  (el2org-add-notification nil))
#+end_src

*** GDScript

#+begin_src emacs-lisp
(use-package gdscript-mode
  :straight (gdscript-mode
             :type git
             :host github
             :repo "godotengine/emacs-gdscript-mode"))
#+end_src

* Writing
** Use single space to delimit sentences

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

** Prose writing environment with Olivetti

A minor mode that automatically adjusts margins &c. for prose writing.

#+begin_src emacs-lisp
(use-package olivetti
  :diminish olivetti-mode)
#+end_src

* Reading
** Info manual reader

#+begin_src emacs-lisp
(add-hook 'Info-mode-hook 'olivetti-mode)
(add-hook 'Info-mode-hook 'variable-pitch-mode)
#+end_src

** EPUB reader

#+begin_src emacs-lisp
(use-package nov
  :custom
  (nov-text-width t)
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (add-hook 'nov-mode-hook 'olivetti-mode))
#+end_src

* ~org-mode~ planning and note-taking

As an exception to the rule in this file, ~org-mode~ is not called with ~use-package~, because it has so much configuration that it warrants splitting it into sections, and it has implicitly been loaded before running this file, given that this configuration itself is written in ~org-mode~.

** Directories

Set a custom variable for the notes directory, so that it can be referred to
later.

#+begin_src emacs-lisp
(setq bkhl/org-directory "~/Documents/Notes/")
#+end_src

** Make initial scratch buffer use ~org-mode~

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

** Editing

Edit src blocks in current window.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Make indentation and fonts in code blocks work according to mode for the language in the block.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t
      org-src-fontify-natively t)
#+end_src

Disable the extra indentation in src blocks.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

This prevents accidental editing in invisible regions.

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'error)
#+end_src

Shortcut for inserting a block of Elisp.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

** Display

Enable ~org-indent~ mode, which makes org-mode indent sections visually, but not in the saved files.

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Use variable fonts in ~org-mode~ buffers.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

Display bullets instead of asterisks.

#+begin_src emacs-lisp
(use-package org-superstar
  :init
  (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

Hide the characters surrounding emphasized phrases

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Use real ellipsis character for collapsed subtrees, and prefix it with a space.

#+begin_src emacs-lisp
(setq org-ellipsis "…")
#+end_src

Use Olivetti mode by default in Org, and make tags align to the default width of Olivetti.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'olivetti-mode)
(setq org-tags-column -70)
#+end_src

** Keybindings

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
#+end_src

** Capturing

Add templates for use by ~org-capture~

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i"
         "Inbox"
         entry
         (file ,(concat bkhl/org-directory "Inbox.org"))
         "* TODO %?")
        ("j" "Journal")
        ("jp"
         "Personal journal entry"
         entry
         (file+olp+datetree
          ,(concat bkhl/org-directory "Notes.org") "Journal")
         "* %u"
         :empty-lines 1)
        ("jw"
         "Work journal entry"
         entry
         (file+olp+datetree
          ,(concat bkhl/org-directory "Work.org") "Journal")
         "* %u"
         :empty-lines 1)
        ("c"
         "Contact"
         entry
         (file ,(concat bkhl/org-directory "Contacts.org"))
         "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:PHONE:
:NICKNAME:
:NOTE:
:ADDRESS:
:BIRTHDAY:
:END:")))
#+end_src

Bind =C-c c= to ~org-capture~ to quickly add notes.

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
#+end_src

** Refiling

This allows refiling within the current buffer, or any agenda files.

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9))
      org-outline-path-complete-in-steps nil
      org-refile-use-outline-path 'file)
#+end_src

** Agendas

Install ~org-super-agenda~ for improved agenda interface, and categorize tasks roughly by urgency.

I use recurring tasks for habits rather than the habit feature, because [[http://www.orgzly.com/][Orgzly]] currently only supports the former feature, so that's why I use a tag for those here.

#+begin_src emacs-lisp
(use-package org-super-agenda
  :custom (org-super-agenda-groups
           '((:name "Schedule"
              :time-grid t)
             (:name "Due today"
              :deadline today)
             (:name "Overdue"
              :deadline past)
             (:name "Due soon"
              :deadline future)
             (:name "Habits"
              :tag ("habit"))
             (:name "Tasks"
              :todo ("TODO" "READ"))))
  :config (org-super-agenda-mode))
#+end_src

Search all files in the notes directory when creating agendas.

#+begin_src emacs-lisp
(setq org-agenda-files `(,bkhl/org-directory))
#+end_src

Keybinding to open an agenda view.

#+begin_src emacs-lisp
(bind-key "C-c a" 'org-agenda)
#+end_src

Hide done tasks from the agenda.

#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t)
#+end_src

** Presentations

#+begin_src emacs-lisp
(use-package org-present
  :config
  (add-hook
   'org-present-mode-hook
   (defun bkhl/org-present-settings ()
     (org-present-big)
     (org-display-inline-images)
     (org-present-hide-cursor)
     (org-present-read-only)))
  (add-hook
   'org-present-mode-quit-hook
   (defun bkhl/org-present-settings-reset ()
     (org-present-small)
     (org-remove-inline-images)
     (org-present-show-cursor)
     (org-present-read-write))))
#+end_src

* File formats
** hledger

#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.journal\\'"
  :custom
  (ledger-post-auto-align nil)
  :config
  (setq ledger-mode-should-check-version nil
        ledger-report-links-in-register nil
        ledger-binary-path "hledger"
        ledger-default-date-format ledger-iso-date-format))
#+end_src
** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* File management
** dired

Make file sizes shown in dired human readable.

#+begin_src emacs-lisp
(setq-default dired-listing-switches "-alh")
#+end_src
