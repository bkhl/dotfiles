#+TITLE: Emacs Configuration
#+AUTHOR: Björn Lindström
#+EMAIL: bkhl@elektrubadur.se
#+STARTUP: overview

* Introduction

This is my Emacs configuration. Inspirations include:

- Harry R. Schwart's [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Emacs configuration]] and [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].
- [[https://emacscast.org/][EmacsCast]].
- Protesilaos Stavrou's  [[https://protesilaos.com/codelog/][blog]] and [[https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g][videos]].

Here is [[https://www.emacswiki.org/emacs/bkhl][my home page on EmacsWiki]].

* Set personal information

#+begin_src emacs-lisp
(setq user-full-name "Björn Lindström"
      user-mail-address "bkhl@elektrubadur.se"
      calendar-latitude 13.76
      calendar-longitude 100.54
      calendar-location-name "Bangkok")
#+end_src

* General helper functions

** Get secret from keyring

Use ~secret-tool~ to get a password or similar from the user keyring.

To store a secret, use a command like ~secret-tool store --label=Foo foo password~. It can then be used here using ~(bkhl/get-secret "foo" "password")~.

#+begin_src emacs-lisp
(defun bkhl/get-secret (attribute value)
  (shell-command-to-string
   (format "secret-tool lookup '%s' '%s'" attribute value)))
#+end_src

* User interface
** Load Modus Operandi theme

#+begin_src emacs-lisp
(use-package modus-themes
  :custom
  (modus-themes-syntax 'faint)
  (modus-themes-org-blocks 'greyscale)
  (modus-themes-scale-headings t)
  (modus-themes-links 'neutral-underline)
  (modus-themes-diffs 'desaturated)
  :config
  (load-theme 'modus-operandi t))
#+end_src

** Enable syntax highlighting everywhere

#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

** Fonts

Setting fonts. I primarily use the ~variable-pitch~ and ~fixed-pitch~ faces in ~org-mode~.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Iosevka BKHL Default"
                    :height 130)
(set-face-attribute 'variable-pitch nil
                    :family "Crimson Pro"
                    :height (/ 1.4 1.3))
(set-face-attribute 'fixed-pitch nil
                    :family "Iosevka BKHL Default"
                    :height (/ 1.3 1.4))
#+end_src

Enable Emoji font if available. ☃

This is run as a hook after the first frame is created, as this will otherwise not work when Emacs is started in daemon mode, or by ~emacsclient~.

#+begin_src emacs-lisp
(defun bkhl/set-fontset-fonts ()
  (set-fontset-font t 'symbol "Noto Color Emoji")
  (set-fontset-font t ?฿ "Iosevka BKHL Default")
  (remove-hook 'focus-in-hook #'bkhl/set-fontset-fonts))

(add-hook 'focus-in-hook #'bkhl/set-fontset-fonts)
#+end_src

** Render some keywords as symbols

This primarily makes =lambda= get rendered as =λ= in Emacs Lisp, but can also be enabled in other modes.

#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
#+end_src

** Customize mode line

Hide minor modes from mode line with Minions.

#+begin_src emacs-lisp
(use-package minions
  :config
  (setq minions-mode-line-lighter ""
        minions-mode-line-delimiters '("" . ""))
  (minions-mode))
#+end_src

Enable smart-mode-line

#+begin_src emacs-lisp
(use-package smart-mode-line
  :config
  (sml/setup))
#+end_src

Show line and column number in mode line.

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+end_src

** Disable bell

Disable warning bell, both the default audio one and the visual one otherwise enabled by =sensible-defaults.el=.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Show loading time on startup

#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Emacs init time: %s" (emacs-init-time)))
#+end_src

** Set window title

Set window title including current buffer or filename, and a project from [[https://gitlab.com/bkhl/etui][Etui]] or [[https://gitlab.com/bkhl/toolboxes/-/blob/latest/scripts/toolbox-project][toolbox-project]].

Also use a straight or squiggly line to show if the buffer has modifications.

#+begin_src emacs-lisp
(setq frame-title-format
      '(
        "%b"
        (:eval (if (buffer-modified-p) " ⁓ " " — "))
        (:eval (or
                (getenv "ETUI_PROJECT")
                (getenv "TOOLBOX_PROJECT")
                (system-name)))))
#+end_src

** Highlight matching pairs of parentheses.

#+begin_src emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+end_src

** Make yes/no prompts shorter

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Prompt before closing Emacs

#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Make middle-clicking mouse yank at point

#+begin_src emacs-lisp
(setq mouse-yank-at-point t)
#+end_src

** Key bindings to change global font scale

#+begin_src emacs-lisp
(use-package default-text-scale
  :bind
  (("C-)" . default-text-scale-reset)
   ("C-+" . default-text-scale-increase)
   ("C-_" . default-text-scale-decrease)))
#+end_src

** Set preferred dateformat

#+begin_src emacs-lisp
(calendar-set-date-style 'iso)
#+end_src

* Configure ~emacsclient~ bevaviour

Raise new ~emacsclient~ frames when created

#+begin_src emacs-lisp
  (defun bkhl/focus-frame ()
    (select-frame-set-input-focus (selected-frame)))
  (add-hook 'server-switch-hook 'bkhl/focus-frame)
  (add-hook 'server-after-make-frame-hook 'bkhl/focus-frame)
#+end_src

* Key bindings and navigation
** Start with an empty scratch buffer.

#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      initial-scratch-message nil)
#+end_src

** Start opening files from home directory

Unless overridden by a buffer, when prompting to open a file, start in the home directory.

#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src

** Disable =C-z=

Disabling =C-z=, which normally minimizes the window, which is rather distracting.

#+begin_src emacs-lisp
(unbind-key "C-z")
#+end_src

** Bind Home/End to move to start/end of line

#+begin_src emacs-lisp
(global-set-key (kbd "<home>") 'move-beginning-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)
#+end_src

** Selectrum for incremental narrowing commands

[[https://github.com/raxod502/selectrum][Selectrum]] is a library for incremental narrowing, and [[https://github.com/raxod502/prescient.el][Prescient]] adds more intelligent sorting of results to it.

#+begin_src emacs-lisp
(use-package selectrum
  :config (selectrum-mode))

(use-package selectrum-prescient
  :config
  (selectrum-prescient-mode)
  (prescient-persist-mode))
#+end_src

** CTRLF for search within buffer

This packages replaces the standard ~isearch-forward~ with a search function based on Selectrum.

Using an advice to use an "unbranded" prompt.

#+begin_src emacs-lisp
(defun bkhl/ctrlf-prompt (prompt)
  (if (string-prefix-p "CTRLF " prompt)
      (concat "Search " (substring prompt 6))
    prompt))

(use-package ctrlf
  :config
  (advice-add 'ctrlf--prompt :filter-return #'bkhl/ctrlf-prompt)
  (ctrlf-mode))
#+end_src

** Use =C-S-f= to expand region

This package allows first selecting the word the current pointer is on, and then by repeating the key press grow the selection to the next larger structure.

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-S-w" . er/expand-region))
#+end_src

** Allow undo of window layout changes

#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

* File handling
** Store backups in tmp directory

Store backups and autosaves in ~temporary-file-directory~. This risks losing some data on a system crash, but I am not very concerned about that as generally my important files are in some kind of version control.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

** Automatically sync updated files

If a file changes, automatically refresh buffers containing the file, so that it doesn't get out of sync.

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Trim trailing spaces and enforce final newline

~trimspace-mode~ sets things up so that when a file is opened, it enables deleting trailing whitespace and newlines before saving the file, unless the file when first opened already has traling whitespace of each type.

#+begin_src emacs-lisp
(use-package trimspace-mode
  :straight (:type git :host gitlab :repo "bkhl/trimspace-mode")
  :hook
  (prog-mode . trimspace-mode-unless-trailing-whitespace)
  (text-mode . trimspace-mode-unless-trailing-whitespace))
#+end_src

** Offer to create parent directories on save

When saving a file to a directory that doesn't exist, offer to create it.

#+begin_src emacs-lisp
  (defun bkhl/ask-create-directory ()
    (when buffer-file-name
      (let ((dir (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p dir))
                   (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
          (make-directory dir t)))))
  (add-hook 'before-save-hook 'bkhl/ask-create-directory)
#+end_src

* Managing containers
** Dockerfile format

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode ("\\'Dockerfile\\.?" . dockerfile-mode))
#+end_src

** Connect by Tramp to Podman

#+begin_src emacs-lisp
(use-package docker-tramp
  :custom
  (docker-tramp-docker-executable "podman"))
#+end_src

* General text editing
** Highlight selected region and apply changes to it

Highlight the region when the mark is active.

#+begin_src emacs-lisp
(transient-mark-mode t)
#+end_src

Set it so that if a selection is active, typed text will replace the selection.

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** Disable indentation using tabs.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Set default line length to 80

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

** Set default indentation width to 4.

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

** Show character name in character description

When using =C-x == to look up the character under the point, also show Unicode
character name.

#+begin_src emacs-lisp
(setq what-cursor-show-names t)
#+end_src

** Automatically pair matching characters like parenthesis

Enable ~electric-pair-mode~, which enables automatic insert of matching characters for example for parentheses.

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** Enable ~yasnippet~

#+begin_src emacs-lisp
(use-package yasnippet)
#+end_src

** Operate on the current line if no region is active

This module allows a number of functions to operate on the current line if no region is selected.

#+begin_src emacs-lisp
(use-package whole-line-or-region
  :config (whole-line-or-region-global-mode))
#+end_src

* Project management and version control
** Projectile project management

Load the Projectile project management package.

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

This allows setting a value in a =.dir-locals.el= to make Projectile list only
files that are tracked in the Git repository.

#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values
             '(projectile-git-command . "git ls-files -zc --exclude-standard"))
#+end_src

** Magit Git integration

Load ~magit~, for working with Git.

#+begin_src emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :commands
  magit-call-git

  :custom
  (magit-push-always-verify nil)
  (git-commit-summary-max-length 50))
#+end_src

** Automatic commit on save

Function to do automatic commit on save in certain repos. This is for use with for example ~org-mode~, to enable finding things after accidental changes.

#+begin_src emacs-lisp
(defun bkhl/magic-commit-current-buffer()
  (magit-call-git "add" buffer-file-name)
  (magit-call-git "commit"
                  "-m"
                  (format "Automatic commit on save of %s"
                          buffer-file-name))
  (magit-refresh))
#+end_src

To use this as an ~after-save-hook~ in a project, create a ~.dir-locals.el~ with something like this:

#+begin_example
((org-mode . ((eval . (add-hook
                       'after-save-hook
                       #'bkhl/magic-commit-current-buffer
                       nil t)))))
#+end_example

** Show uncommited changes in fringe

Load ~diff-hl~ which shows uncommited changes in the left-hand fringe.

#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode 1)
  (diff-hl-flydiff-mode 1)
  (add-hook 'magit-pre-refresh-hook
            'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook
            'diff-hl-magit-post-refresh))
#+end_src

** ~git-timemachine~ for browsing file history

#+begin_src emacs-lisp
(use-package git-timemachine
  :after magit
  :hook magit)
#+end_src

** Make ~vc-diff~ imitate the diff format of Magit

#+begin_src emacs-lisp
(setq diff-font-lock-prettify t)
#+end_src

** Ally remembering risky local variables

This overrides the Emacs settings that enforces having to accept local variables matching certain patterns every time they are used.

#+begin_src emacs-lisp
(advice-add 'risky-local-variable-p :override #'ignore)
#+end_src

* Programming
** In programming modes, treat words in camel case symbols as separate.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

** Add keybinding to comment/uncomment line or region

#+begin_src emacs-lisp
(defun bkhl/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))


(global-set-key (kbd "M-;")
                'bkhl/comment-or-uncomment-region-or-line)
#+end_src

** Automatically scroll to new output in the =*compilation*= buffer.

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src

** Multi-purpose programming packages
*** Diagnostics with ~flymake~

#+begin_src emacs-lisp
(use-package flymake
  :bind
  (:map flymake-mode-map
   ("M-n" . flymake-goto-next-error)
   ("M-p" . flymake-goto-prev-error)))
#+end_src

*** Language Server Protocol with ~eglot~

#+begin_src emacs-lisp
(use-package eglot
  :commands (eglot eglot-ensure)
  :config
  (bind-key "C-c l f" 'eglot-format eglot-mode-map)
  (bind-key "C-c l r" 'eglot-rename eglot-mode-map))
#+end_src

*** Completion with ~company~

#+begin_src emacs-lisp
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (bind-key "M-/" 'company-complete-common))
#+end_src

Use the ~company-posframe~ plugin to show the ~company~ menus in a separate frame, not affected by e.g. variable pitch mode.

#+begin_src emacs-lisp
(use-package company-posframe
  :custom (company-posframe-show-indicator nil)
  :hook (company-mode . company-posframe-mode))
#+end_src

Use [[https://github.com/raxod502/prescient.el][Prescient]] to sort alternatives in Company.

#+begin_src emacs-lisp
(use-package company-prescient
  :config (company-prescient-mode))
#+end_src

** Programming languages
*** Python
**** Default intepreter

Use Python 3 as default Python interpreter. This is for environments that does not have a ~python~ command, or that points it to Python 2.

#+begin_src emacs-lisp
(setq python-shell-interpreter "python"
      python-shell-interpreter-args "-i")
#+end_src

**** Activate virtual environments

Package for activating Python virtual environments.

#+begin_src emacs-lisp
(use-package pyvenv)
#+end_src

* Writing
** Use single space to delimit sentences

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

** Prose writing environment with Olivetti

A minor mode that automatically adjusts margins &c. for prose writing.

#+begin_src emacs-lisp
(use-package olivetti)
#+end_src

* Reading
** EPUB reader

#+begin_src emacs-lisp
(use-package nov
  :custom
  (nov-text-width t)
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (add-hook 'nov-mode-hook 'olivetti-mode))
#+end_src

* ~org-mode~ planning and note-taking

As an exception to the rule in this file, ~org-mode~ is not called with ~use-package~, because it has so much configuration that it warrants splitting it into sections, and it has implicitly been loaded before running this file, given that this configuration itself is written in ~org-mode~.

** =TODO= keywords

Customizing =TODO= keywords adding my own state =READ=, which is for things to
read and possibly make notes on or file.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t)" "READ(r)"
         "|"
         "DONE(d)" "CANCELLED(c)")))
#+end_src

** Directories

Set a custom variable for the notes directory, so that it can be referred to
later.

#+begin_src emacs-lisp
(setq bkhl/org-directory "~/Documents/Notes/")
#+end_src

** Make initial scratch buffer use ~org-mode~

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

** Editing

Edit src blocks in current window.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Make indentation and fonts in code blocks work according to mode for the language in the block.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t
      org-src-fontify-natively t)
#+end_src

Disable the extra indentation in src blocks.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

This prevents accidental editing in invisible regions.

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'error)
#+end_src

Shortcut for inserting a block of Elisp.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

** Display

Enable ~org-indent~ mode, which makes org-mode indent sections visually, but not in the saved files.

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Use variable fonts in ~org-mode~ buffers.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

Display bullets instead of asterisks.

#+begin_src emacs-lisp
(use-package org-superstar
  :init
  (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

Hide the characters surrounding emphasized phrases

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Use real ellipsis character for collapsed subtrees, and prefix it with a space.

#+begin_src emacs-lisp
(setq org-ellipsis "…")
#+end_src

Use Olivetti mode by default in Org, and make tags align to the default width of Olivetti.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'olivetti-mode)
(setq org-tags-column -70)
#+end_src

** Capturing

Add templates for use by ~org-capture~

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i"
         "inbox"
         entry
         (file ,(concat bkhl/org-directory "Inbox.org"))
         "* TODO %?")
        ("c"
         "contact"
         entry
         (file ,(concat bkhl/org-directory "Contacts.org"))
         "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:PHONE:
:NICKNAME:
:NOTE:
:ADDRESS:
:BIRTHDAY:
:END:")))
#+end_src

Bind =C-c c= to ~org-capture~ to quickly add notes.

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
#+end_src

** Refiling

This allows refiling within the current buffer, or any agenda files.

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9))
      org-outline-path-complete-in-steps nil
      org-refile-use-outline-path 'file)
#+end_src

** Agendas

Install ~org-super-agenda~ for improved agenda interface, and categorize tasks roughly by urgency.

I use recurring tasks for habits rather than the habit feature, because [[http://www.orgzly.com/][Orgzly]] currently only supports the former feature, so that's why I use a tag for those here.

#+begin_src emacs-lisp
(use-package org-super-agenda
  :custom (org-super-agenda-groups
           '((:name "Schedule"
              :time-grid t)
             (:name "Due today"
              :deadline today)
             (:name "Overdue"
              :deadline past)
             (:name "Due soon"
              :deadline future)
             (:name "Habits"
              :tag ("habit"))
             (:name "Tasks"
              :todo ("TODO" "READ"))))
  :config (org-super-agenda-mode))
#+end_src

Search all files in the notes directory when creating agendas.

#+begin_src emacs-lisp
(setq org-agenda-files `(,bkhl/org-directory))
#+end_src

Keybinding to open an agenda view.

#+begin_src emacs-lisp
(bind-key "C-c a" 'org-agenda)
#+end_src

Hide done tasks from the agenda.

#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t)
#+end_src

** Presentations

#+begin_src emacs-lisp
(use-package org-present
  :config
  (defun bkhl/org-present-settings ()
    (org-present-big)
    (org-display-inline-images)
    (org-present-hide-cursor)
    (org-present-read-only))
  (add-hook 'org-present-mode-hook 'bkhl/org-present-settings)
  (defun bkhl/org-present-settings-reset ()
    (org-present-small)
    (org-remove-inline-images)
    (org-present-show-cursor)
    (org-present-read-write))
  (add-hook 'org-present-mode-quit-hook 'bkhl/org-present-settings-reset))
#+end_src

* File formats
** hledger

#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.journal\\'"
  :custom
  (ledger-post-auto-align nil)
  :config
  (setq ledger-mode-should-check-version nil
        ledger-report-links-in-register nil
        ledger-binary-path "hledger"
        ledger-default-date-format ledger-iso-date-format))
#+end_src
** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* File management
** dired

Make file sizes shown in dired human readable.

#+begin_src emacs-lisp
(setq-default dired-listing-switches "-alh")
#+end_src

* Internet Relay Chat

Set up the Circe IRC client.

#+begin_src emacs-lisp
(defun bkhl/circe-get-password (host)
  (bkhl/get-secret host "password"))

(use-package circe
  :custom
  (tracking-position 'end)
  (circe-network-defaults nil)
  (circe-reduce-lurker-spam t)
  (circe-network-options
   '(("Freenode"
      :host "irc.elektrubadur.se"
      :port 50080
      :tls t
      :user "bkhl/Freenode"
      :pass bkhl/circe-get-password)))
  :config
  (circe-lagmon-mode)
  (enable-circe-color-nicks)
  (enable-lui-track)
  (add-to-list 'circe-format-not-tracked
               'circe-format-self-say)
  (add-hook 'circe-chat-mode-hook #'bkhl/circe-chat-mode-init))
#+end_src

Some configuration to apply when opening a new Circe buffer.

#+begin_src emacs-lisp
(defun bkhl/circe-chat-mode-init ()
  (setq-local electric-pair-preserve-balance nil))
#+end_src

Function to allow connecting to IRC with =M-x irc=.

#+begin_src emacs-lisp
(defun bkhl/irc ()
  (interactive)
  (circe "Freenode"))

(defalias 'irc 'bkhl/irc)
#+end_src

Some extra commands to interact with the [[https://wiki.znc.in/][ZNC]] IRC bouncer.

#+begin_src emacs-lisp
(defun bkhl/circe-chat-target-or (channel)
  (if (string-empty-p channel) circe-chat-target channel))

(defun circe-command-ZNC (command)
  "Send a command to ZNC through the special '*status' user."
  (interactive "sZNC command: ")
  (circe-command-MSG "*status" command))

(defun circe-command-DETACH (channel)
  "Disconnect the client from a channel but stay connected in the bouncer."
  (interactive "sChannel: ")
  (circe-command-QUOTE
   (format "DETACH %s" (bkhl/circe-chat-target-or channel))))

(defun circe-command-STICK (channel)
  "Stay connected to channel using ZNC stickychan module."
  (interactive "sChannel: ")
  (circe-command-MSG
   "*stickychan"
   (format "STICK %s" (bkhl/circe-chat-target-or channel))))

(defun circe-command-UNSTICK (channel)
  "Remove channel from list of channels to stay connected to using ZNC stickychan module."
  (interactive "sChannel: ")
  (circe-command-MSG
   "*stickychan"
   (format "UNSTICK %s" (bkhl/circe-chat-target-or channel))))

(defun circe-command-BACKLOG (&optional lines)
  "Request backlog for current channel."
  (let ((lines (if (string-blank-p lines)
                   50
                 (string-to-number lines))))
    (circe-command-MSG "*backlog"
                       (format "%s %s"
                               circe-chat-target
                               (max (- lines 1) 1)))))
#+end_src

Work-around for the fact that the ZNC backlog module sometimes sends empty lines that need to be ignored.

#+begin_src emacs-lisp
(defun bkhl/irc-line-empty-p (proc line)
  (string-empty-p line))

(advice-add 'irc--handle-line :before-until #'bkhl/irc-line-empty-p)
#+end_src
