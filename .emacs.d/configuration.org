#+TITLE: Emacs Configuration
#+AUTHOR: Björn Lindström
#+EMAIL: bkhl@elektrubadur.se
#+STARTUP: overview

* Introduction

This is my Emacs configuration. Inspirations include:

- Harry R. Schwartz' [[https://github.com/hrs/dotfiles/blob/main/emacs/.config/emacs/configuration.org][Emacs configuration]] and [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].
- Phil Hagelberg's [[https://git.sr.ht/~technomancy/better-defaults][better-defaults.el]].
- [[https://emacscast.org/][EmacsCast]].
- Protesilaos Stavrou's [[https://protesilaos.com/codelog/][blog]] and [[https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g][videos]].

Some interesting properties of this configuration:

- Almost all of the configuration is kept in an Org file.
- The startup time is quite fast. There are some tweaks in [[file:init.el][init.el]] and [[file:early-init.el][early-init.el]] that makes helps with this, together with prudent use of autoloading, and in general trying to keep the number of add-on packages low.
- Addon packages are managed manually as Git submodules.

The configuration is organized so that basic configuration of Emacs comes first, then built-in packages that are bundles with Emacs, followed by the add-on packages that are kept in [[file:site-lisp/][~/.emacs.d/site-lisp/]].

Here is [[https://www.emacswiki.org/emacs/bkhl][my home page on EmacsWiki]].

* Initialization

Some initial setup that is required to run before other things, some of them sensitive to execution order.

** Keep customizations in separate file

This makes the Emacs customization interface store values in a separate file, instead of in ~init.el~.

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file :noerror)
#+end_src

** Show init time on startup

#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Emacs init time: %s" (emacs-init-time)))
#+end_src

* Set personal information

#+begin_src emacs-lisp
(setq user-full-name "Björn Lindström"
      user-mail-address "bkhl@elektrubadur.se")
#+end_src

* Built-in functionality

Configuration of built-in Emacs behaviour and packages bundled with Emacs.

** Interface
*** Show line and column number in mode line

#+begin_src emacs-lisp
(line-number-mode)
(column-number-mode)
#+end_src

*** Fonts

Setting fonts. I primarily use the ~variable-pitch~ and ~fixed-pitch~ faces in ~org-mode~.

#+begin_src emacs-lisp
(setq my/fixed-pitch-font-family "Iosevka BKHL Default"
      my/variable-pitch-font-family "Charis SIL"
      my/default-text-height 130)

(set-face-attribute 'default nil
                    :family my/fixed-pitch-font-family)
(set-face-attribute 'variable-pitch nil
                    :family my/variable-pitch-font-family)
(set-face-attribute 'fixed-pitch nil
                    :family my/fixed-pitch-font-family)
#+end_src

Enable Emoji font if available. ☃

This is run as a hook after the first frame is created, as this will otherwise not work when Emacs is started in daemon mode, or by ~emacsclient~.

#+begin_src emacs-lisp
(setq my/emoji-font-family "Noto Color Emoji")

(add-hook
 'server-after-make-frame-hook
 (defun my/set-fontset-fonts ()
   (set-fontset-font t '(#x2600 . #x26ff) my/emoji-font-family)
   (set-fontset-font t 'emoji my/emoji-font-family)
   (remove-hook 'server-after-make-frame-hook
                'my/set-fontset-fonts)))
#+end_src

*** Disable bell

Disable warning bell, both the default audio one and the visual one.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

*** Set window title

Set window title including current buffer or filename, along with system name. Use a straight or squiggly line to show if the buffer has modifications.

#+begin_src emacs-lisp
(setq frame-title-format
      '(
        "%b"
        (:eval (if (buffer-modified-p) " ⁓ " " — "))
        (:eval (system-name))))
#+end_src

*** Enable restoring exact window size

Setting this variable allows resizing window by pixels, rather than rounding to an exact number of lines or columns. This is needed to be able to restore back from fullscreen to original frame size in Gnome.

#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src

*** Give ~emacsclient~ frames focus

Give new ~emacsclient~ frames focus when created.

#+begin_src emacs-lisp
(defun my/focus-frame ()
  (select-frame-set-input-focus (selected-frame)))
(add-hook 'server-switch-hook 'my/focus-frame)
(add-hook 'server-after-make-frame-hook 'my/focus-frame)
#+end_src

*** Disable message on new ~emacsclient~ frames

#+begin_src emacs-lisp
(setq server-client-instructions nil)
#+end_src

*** Prompt before closing Emacs

#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

*** Make middle-clicking mouse yank at point

#+begin_src emacs-lisp
(setq mouse-yank-at-point t)
#+end_src

*** Key bindings to change global font scale

#+begin_src emacs-lisp
(setq my/current-text-height my/default-text-height)

(defun my/revert-text-height ()
  (interactive)
  (set-face-attribute 'default nil :height my/default-text-height)
  (setq my/current-text-height (face-attribute 'default :height))
  (message "Font size reverted to %d" my/current-text-height))

(defun my/increase-text-height ()
  (interactive)
  (set-face-attribute 'default nil :height (+ my/current-text-height 10))
  (setq my/current-text-height (face-attribute 'default :height))
  (message "Font size increased to %d" my/current-text-height))

(defun my/decrease-text-height ()
  (interactive)
  (set-face-attribute 'default nil :height (- my/current-text-height 10))
  (setq my/current-text-height (face-attribute 'default :height))
  (message "Font size decreased to %d" my/current-text-height))

(global-set-key (kbd "C-)") #'my/revert-text-height)
(global-set-key (kbd "C-+") #'my/increase-text-height)
(global-set-key (kbd "C-_") #'my/decrease-text-height)
#+end_src

*** Set preferred dateformat

#+begin_src emacs-lisp
(calendar-set-date-style 'iso)
#+end_src

*** Allow undo of window layout changes

#+begin_src emacs-lisp
(winner-mode)
#+end_src

*** Preserve ~M-x~ command history between sessions

#+begin_src emacs-lisp
(savehist-mode)
#+end_src

*** Use saved point position in previously opened files

#+begin_src emacs-lisp
(save-place-mode)
#+end_src

*** Scrolling behaviour when moving cursor

When the cursor moves close to the edge of the screen, scroll only one line at time, but try to keep 5 rows within view.

#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-margin 5)
#+end_src

*** Highlight error messages

In ~next-error~ buffers, highligt the currently visited error.

#+begin_src emacs-lisp
(setq next-error-message-highlight t)
#+end_src

*** Make yes/no prompts shorter

#+begin_src emacs-lisp
(setq use-short-answers t)
#+end_src

*** Don't show bookmarks in fringe

#+begin_src emacs-lisp
(setq bookmark-set-fringe-mark nil)
#+end_src

*** Use bar cursor

#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
#+end_src

** Documentation and help
*** Make ~apropos~ search more extensively

#+begin_src emacs-lisp
(setq setqapropos-do-all t)
#+end_src

*** Use variable pitch in Info reader

#+begin_src emacs-lisp
(add-hook 'Info-mode-hook 'variable-pitch-mode)
#+end_src

*** Autoload if documentation is missing from autoload objects

#+begin_src emacs-lisp
(setq help-enable-symbol-autoload t)
#+end_src

*** Show outlines in bindings description

#+begin_src emacs-lisp
(setq describe-bindings-outline t)
#+end_src

** Key bindings
*** Disable ~C-z~

Disabling ~C-z~, which normally minimizes the window, which is rather distracting.

#+begin_src emacs-lisp
(global-unset-key [(control z)])
#+end_src

*** Switch windows with ~M-o~

Bind ~M-o~ (by default bound to a rarely used command) to ~other-window~.

#+begin_src emacs-lisp
(global-set-key (kbd "M-o") #'other-window)
#+end_src

*** Switch between windows with ~S-<direction>~

#+begin_src emacs-lisp
(windmove-default-keybindings)
#+end_src

*** Enable repeat maps for commands that have them

This adds ability to repat some common commands by repeating the last key in its binding.

#+begin_src emacs-lisp
(repeat-mode)
#+end_src

** Buffers
*** Start with an empty scratch buffer.

#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      initial-scratch-message nil)
#+end_src

*** Use directory name in buffer names for files with same name

#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+end_src

*** Allow remembering risky local variables

This overrides the Emacs settings that enforces having to accept local variables matching certain patterns every time they are used.

#+begin_src emacs-lisp
(advice-add 'risky-local-variable-p :override #'ignore)
#+end_src

*** Load  ~.dir-locals.el~ files on remote hosts

#+begin_src emacs-lisp
(setq enable-remote-dir-locals t)
#+end_src

** Files
*** Start opening files from home directory

Unless overridden by a buffer, when prompting to open a file, start in the home directory.

#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src

*** Backup by copying

The default method here can break hardlinks.

#+begin_src emacs-lisp
(setq backup-by-copying t)
#+end_src

*** Store backups in tmp directory

Store backups and autosaves in ~temporary-file-directory~. This risks losing some data on a system crash, but I am not very concerned about that as generally my important files are in some kind of version control.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

*** Offer to create parent directories on save

When saving a file to a directory that doesn't exist, offer to create it.

#+begin_src emacs-lisp
(add-hook
 'before-save-hook
 (defun my/ask-create-directory ()
   (when buffer-file-name
     (let ((dir (file-name-directory buffer-file-name)))
       (when
           (and
            (not (file-exists-p dir))
            (y-or-n-p
             (format
              "Directory %s does not exist. Create it?"
              dir)))
         (make-directory dir t))))))
#+end_src

*** Automatically sync updated files

If a file changes, automatically refresh buffers containing the file, so that it doesn't get out of sync.

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

*** Disable Emacs lock files

Disable use of those lock files with a ~.#~ prefix that Emacs by default creates. Since my ways of using Emacs rarely involves multiple Emacs instances opening the same file, they cause me more problems than they solve.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

*** ~dired~

Make file sizes shown in dired human readable.

#+begin_src emacs-lisp
(setq dired-listing-switches
      "-l --all --human-readable --group-directories-first")
#+end_src

*** ~tramp~ remote editing

Ensure that Tramp uses path of remote shell on remote hosts.

#+begin_src emacs-lisp
(eval-after-load 'tramp
  '(add-to-list 'tramp-remote-path
             'tramp-own-remote-path))
#+end_src

** Text editing
*** Bind Home/End to move to start/end of line

#+begin_src emacs-lisp
(global-set-key (kbd "<home>") #'move-beginning-of-line)
(global-set-key (kbd "<end>") #'move-end-of-line)
#+end_src

*** Change behaviour of ~M-z~ for zapping to character

Make ~M-z~ kill characters up to the character /before/ the next occurrence of the selected character, instead of including it, which is generally more useful.

#+begin_src emacs-lisp
(global-set-key (kbd "M-z") #'zap-up-to-char)
#+end_src

*** Use single space to delimit sentences

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

*** Highlight selected region and apply changes to it

Highlight the region when the mark is active.

#+begin_src emacs-lisp
(transient-mark-mode t)
#+end_src

Set it so that if a selection is active, typed text will replace the selection.

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

*** Disable indentation using tabs.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

*** Set default line length to 80

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

*** Set default indentation width to 4.

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

*** Show character name in character description

When using ~C-x =~ to look up the character under the point, also show Unicode
character name.

#+begin_src emacs-lisp
(setq what-cursor-show-names t)
#+end_src

*** Automatically pair matching characters like parenthesis

Enable ~electric-pair-mode~, which enables automatic insert of matching characters for example for parentheses.

#+begin_src emacs-lisp
(electric-pair-mode)
#+end_src

*** Save existing clipboard text into kill ring before replacing it

Prevents killing text in Emacs from irrevocably deleting things from the system clipboard.

#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

*** Enable ~downcase-region~ and ~upcase-region~

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

** Programming
*** Enable syntax highlighting everywhere

#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

*** Render some keywords and operators as symbols

I use this to make =lambda= get rendered as =λ= in Emacs Lisp, and similar replacements in other languages.

#+begin_src emacs-lisp
(global-prettify-symbols-mode)
#+end_src

*** Highlight matching pairs of parentheses.

#+begin_src emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+end_src

*** In programming modes, treat words in camel case symbols as separate.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

*** Bind key to trigger compilation/recompilation

#+begin_src emacs-lisp
(define-key prog-mode-map (kbd "C-c b") #'compile)
(define-key prog-mode-map (kbd "C-c r") #'recompile)
#+end_src

*** ~flymake~

Package for showing diagnostics from linters and similar interactively.

#+begin_src emacs-lisp
(autoload #'flymake-goto-next-error "flymake" nil t)
(autoload #'flymake-goto-prev-error "flymake" nil t)

(eval-after-load 'flymake
  '(progn
     (define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
     (define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)))
#+end_src

*** Languages
**** Perl

Perl indentation preferences.

#+begin_src emacs-lisp
(setq perl-indent-parens-as-block t)
#+end_src

Custom prettify symbols for Perl.

#+begin_src emacs-lisp
(add-hook 'perl-mode-hook
          (defun my/add-perl-prettify-symbols ()
            (setq prettify-symbols-alist '(("->" . ?→)
                                           ("=>" . ?⇒)))))
#+end_src

**** C

#+begin_src emacs-lisp
(add-hook 'c-mode-hook
          (defun my/c-mode-setup ()
            (setq-local c-default-style "linux")
            (setq-local c-basic-offset 4)))
#+end_src

** Version control
*** ~vc-diff~

Make ~vc-diff~ imitate the diff format of Magit.

#+begin_src emacs-lisp
(setq diff-font-lock-prettify t)
#+end_src

*** ~ediff~

Make ediff use existing frame instead of creating new one

#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

** ~org-mode~ planning and note-taking
*** Default ~org-mode~ directory

Set a custom variable for the notes directory, so that it can be referred to
later.

#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes/")
#+end_src

*** Make initial scratch buffer use ~org-mode~

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

*** Editing

Edit src blocks in current window.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Make indentation and fonts in code blocks work according to mode for the language in the block.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t
      org-src-fontify-natively t)
#+end_src

Disable the extra indentation in src blocks.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

This prevents accidental editing in invisible regions.

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'error)
#+end_src

Shortcut for inserting a block of Elisp.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

When trying to edit in an hidden area, expand it before throwing an error.

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'show-and-error)
#+end_src

*** Display

Enable ~org-indent~ mode, which makes org-mode indent sections visually, but not in the saved files.

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Use variable fonts in ~org-mode~ buffers.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

Hide the characters surrounding emphasized phrases

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Use real ellipsis character for collapsed subtrees, and prefix it with a space.

#+begin_src emacs-lisp
(setq org-ellipsis "…")
#+end_src

Put tags right after headline. This causes fewer conflicts with add-on packages affecting Org-mode style.

#+begin_src emacs-lisp
(setq org-tags-column 0
      org-auto-align-tags nil)
#+end_src

Show Latex-style entities as Unicode characters.

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src

*** Key bindings
****  Editing of headers

When point is on a headline, make ~C-a~ and ~C-e~ go to beginning/end of headline text.

#+begin_src emacs-lisp
(setq org-special-ctrl-a/e t)
#+end_src

Insert new headlines after current subtree.

#+begin_src emacs-lisp
(setq org-insert-heading-respect-content t)
#+end_src

**** Global key binding to store links for ~org-mode~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
#+end_src

**** Navigation between windows in org-mode

Reduce conflict with the global ~windmove~ key bindings.

#+begin_src emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src

*** Capturing

Add templates for use by ~org-capture~.

#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i"
         "Inbox"
         entry
         (file ,(concat org-directory "Inbox.org"))
         "* TODO %?")))
#+end_src

Bind ~C-c c~ to ~org-capture~ to quickly add notes.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

*** Refiling

This allows refiling within the current buffer, or any agenda files.

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9))
      org-outline-path-complete-in-steps nil
      org-refile-use-outline-path 'file)
#+end_src

*** Agendas

Search all files in the notes directory when creating agendas.

#+begin_src emacs-lisp
(setq org-agenda-files `(,org-directory))
#+end_src

Key binding to open an agenda view.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

Hide done tasks from the agenda.

#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t)
#+end_src

Hide already scheduled tasks from the agenda.

#+begin_src emacs-lisp
(setq org-agenda-todo-ignore-scheduled 'all)
#+end_src

Show tags right after headline. Reduces conflicts with packages that affect Org agenda style.

#+begin_src emacs-lisp
(setq org-agenda-tags-column 0)
#+end_src

Some agenda visual styling.

#+begin_src emacs-lisp
(setq org-agenda-block-separator ?-
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800)
        " ┄┄┄" "")
      org-agenda-current-time-string
      "🠨")
#+end_src

* Add-on packages

Configuration of add-on packages.

** Initialization

Set ~load-path~ and load ~use-package~ package, used to configure the other add-on packages below.

*** [[file:site-lisp/auto-compile][auto-compile]] to prevent loading outdated compiled modules

This package needs to be loaded as early as possible, so see [[file:early-init.el][early-init.el]].

*** [[file:site-lisp/use-package][use-package]]

The ~use-package~ and ~bind-key~ macros provided with this package makes it easier to configure add-on packages without generally having to remember how to set up autoloading &c.

#+begin_src emacs-lisp
(add-to-list 'load-path
             (expand-file-name (concat user-emacs-directory
                                       "site-lisp/use-package")))
(require 'use-package)
#+end_src

**** Provide default ~:load-path~ pointing to location of submodules

This makes the ~:load-package~ keyword in ~use-package~ calls default to a directory under ~/.emacs.d/site-lisp/~ named the same as the package to be imported. For packages where for some reason the package name doesn't match the directory name, or that has its Lisp files in a subdirectory, an explicit ~:load-path~ needs to be added.

#+begin_src emacs-lisp
(setf (alist-get :load-path use-package-defaults)
      '((lambda (name args)
          (list (expand-file-name (concat user-emacs-directory
                                          "site-lisp/"
                                          (symbol-name name)))))
        t))
#+end_src

**** Add ~:make-autoloads~ keyword extension to generate autoload files

Some packages rely on ~package.el~ (or equivalent) to generate and register an autoloads file. This custom keyword will do that for packages included without a package manager.

This is the function that actually generates the autoload file (if needed) and loads it.

Since ~make-directory-autoloads~ has no logic to work out if the file needs to be regenerated, this function will skip calling it the file exists already, and is newer than all the other ~.el~ files in the directory.

If a package has additional files in subdirectories and such, this function would not handle it, but then neither would ~package-generate-autoloads~, as far as I can tell, so this should work for any packages supported by ~package.el~.

#+begin_src emacs-lisp
(defun my/use-package-autoload-package (name package-directory)
  "Set up autoloading for package NAME in directory PACKAGE-DIRECTORY."
  (let* ((name (symbol-name name))
         (auto-file (expand-file-name (format "%s/%s-autoloads.el"
                                              package-directory
                                              name))))
    (when (or (not (file-exists-p auto-file))
              (let* ((autoloads-attributes (file-attributes auto-file))
                     (autoloads-age (file-attribute-modification-time autoloads-attributes))
                     (autoloads-inode-number (file-attribute-inode-number autoloads-attributes)))
                (seq-find (lambda (attributes)
                            (time-less-p autoloads-age
                                         (file-attribute-modification-time attributes)))
                          (mapcar #'cdr (directory-files-and-attributes package-directory
                                                                        nil
                                                                        (rx ".el" eos))))))
      (make-directory-autoloads package-directory auto-file))
    (load auto-file package-directory)))
#+end_src

Register the custom keyword. This is added first in the list, so that it will have access to the ~:load-path~ parameter, and so that it will load before ~:defer~ or other keywords that might cause this to run after the package is loaded.

#+begin_src emacs-lisp
(add-to-list 'use-package-keywords :make-autoloads)
#+end_src

This makes the keyword take boolean parameters similar to other keywords like ~:defer~.

#+begin_src emacs-lisp
(defalias 'use-package-normalize/:make-autoloads
  'use-package-normalize-predicate)
#+end_src

The handler function is what injects the call to the function to generate the autoloads file when the ~use-package~ macro is expanded.

#+begin_src emacs-lisp
(defun use-package-handler/:make-autoloads (name _keyword arg rest state)
  (use-package-concat
     (mapcar #'(lambda (path)
                 `(my/use-package-autoload-package ',name ,path))
             (plist-get rest :load-path))
     (use-package-process-keywords name rest state)))
#+end_src

** Dependencies

These are add-on packages that are dependencies of other packages further down, as listed under each one.

*** [[file:site-lisp/compat][compat]]

- [[#consult][consult]]
- [[#magit][magit]]

#+begin_src emacs-lisp
(use-package compat
  :defer)
#+end_src

*** [[file:site-lisp/dash][dash]]

- [[#magit][magit]]
- [[#nov][nov]]

#+begin_src emacs-lisp
(use-package dash
  :defer)
#+end_src

*** [[file:site-lisp/esxml][esxml]]

- [[#nov][nov]]

#+begin_src emacs-lisp
(use-package esxml
  :defer)
#+end_src

*** [[file:site-lisp/transient][transient]]

- [[#git-timemachine][git-timemachine]]
- [[#magit][magit]]

#+begin_src emacs-lisp
(use-package transient
  :defer
  :load-path "site-lisp/transient/lisp")
#+end_src

*** [[file:site-lisp/with-editor][with-editor]]

- [[#magit][magit]]

#+begin_src emacs-lisp
(use-package with-editor
  :load-path "site-lisp/with-editor/lisp")
#+end_src

** Interface
*** [[file:site-lisp/modus-themes][modus-themes]] accessible themes

#+begin_src emacs-lisp
(use-package modus-themes
  :custom
  (modus-themes-bold-constructs t)
  (modus-themes-slanted-constructs t)
  (modus-themes-mixed-fonts t)
  (modus-themes-org-blocks 'gray-background)
  (modus-themes-common-palette-overrides
   '((builtin rust)
     (keyword blue)
     (string green-faint)))
  :config
  (modus-themes-load-theme 'modus-operandi))
#+end_src

*** [[file:site-lisp/minions][minions]] mode line minor mode listing improvements

Hides minor modes in a popup menu to preserve space and make the mode line less noisy.

#+begin_src emacs-lisp
(use-package minions
  :custom
  (minions-prominent-modes '(trimspace-mode))
  :config
  (minions-mode))
#+end_src

*** [[file:site-lisp/lin][lin]] mode for highlight of current line.

Enable higlight of current line in selected modes.

#+begin_src emacs-lisp
(use-package lin
  :custom
  (lin-face 'lin-yellow)
  :config
  (lin-global-mode))
#+end_src

*** [[file:site-lisp/hide-mode-line][hide-mode-line]] to hide mode line when desired

#+begin_src emacs-lisp
(use-package hide-mode-line
  :commands hide-mode-line-mode)
#+end_src

*** [[file:site-lisp/edit-server][edit-server]] to edit Firefox text areas

This module provides the server allowing the [[https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1/][Edit with Emacs]] Firefox add-on to open Emacs buffers where you can edit the content of text areas.

#+begin_src emacs-lisp
(use-package edit-server
  :load-path "site-lisp/edit-server/servers"
  :custom
  (edit-server-new-frame nil)
  :config
  (when (and (daemonp)
             (not (process-status "edit-server")))
    (edit-server-start)))
#+end_src

*** [[file:site-lisp/sv-kalender][sv-kalender]] Swedish calendar localization

#+begin_src emacs-lisp
(use-package sv-kalender)
#+end_src

*** [[file:site-lisp/olivetti][olivetti]] to adjust margins of text

A minor mode that automatically adjusts margins &c. for reading and writing prose.

#+begin_src emacs-lisp
(use-package olivetti
  :hook
  (Info-mode . olivetti-mode)
  (org-mode . olivetti-mode)
  (ewww . olivetti-mode))
#+end_src

*** Completion

**** [[file:site-lisp/corfu][corfu]] for completion at point

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-auto t)
  :config
  (global-corfu-mode))
#+end_src

**** [[file:site-lisp/cape][cape]] completion at point extensions

#+begin_src emacs-lisp
(use-package cape
  :make-autoloads
  :bind (("C-c p p" . completion-at-point)
         ("C-c p t" . complete-tag)
         ("C-c p d" . cape-dabbrev)
         ("C-c p h" . cape-hist)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))
#+end_src

**** [[file:site-lisp/orderless][orderless]] completion style

[[https://github.com/oantolin/orderless][Orderless]] provides a completion style that allows typing components of a canditate out of order.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completition-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))
  :config
  (let ((hook (defun my/minibuffer-setup ()
                (setq-local completion-styles '(orderless basic)))))
    (remove-hook 'minibuffer-setup-hook hook)
    (add-hook 'minibuffer-setup-hook hook 1)))
#+end_src

*** Minibuffer

**** [[file:site-lisp/vertico][vertico]] for minibuffer completion

This is a library for completion in the minibuffer, which integrates with the emacs ~completing-read~ functionality.

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode))
#+end_src

Do not allow the cursor in the minibuffer prompt.

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

Add prompt indicator to ~completing-read-multiple~.

#+begin_src emacs-lisp
(defun my/crm-indicator (args)
  (cons (format "[CRM %s] %s"
                (replace-regexp-in-string
                 (rx (or (seq bos "["
                              (*? nonl)
                              "]*")
                         (seq "["
                              (*? nonl)
                              "]*" eos)))
                 ""
                 crm-separator)
                (car args))
        (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'my/crm-indicator)
#+end_src

#+begin_src emacs-lisp
(setq read-extended-command-predicate
      #'command-completion-default-include-p)
#+end_src

Allow minibuffer commands while in the minibuffer.

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

**** [[file:site-lisp/marginalia][marginalia]] minibuffer annotations

#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode))
#+end_src

**** [[file:site-lisp/consult][consult]] search and navigation commands
:PROPERTIES:
:CUSTOM_ID: consult
:END:

#+begin_src emacs-lisp
(use-package consult
  :make-autoloads
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)

         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)  ;; replaces `nrepeat-complex-command'
         ("C-x b" . consult-buffer)  ;; replaces `switch-to-buffer'
         ("C-x 4 b" . consult-buffer-other-window)  ;; replaces `switch-to-buffer-other-window'
         ("C-x 5 b" . consult-buffer-other-frame) ;; replaces `switch-to-buffer-other-frame'
         ("C-x r b" . consult-bookmark)  ;; replaces `bookmark-jump'
         ("C-x p b" . consult-project-buffer)  ;; replaces `project-switch-to-buffer'

         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)  ;; replaces `abbrev-prefix-mark' (unrelated)
         ("C-M-#" . consult-register)

         ;; Other custom bindings
         ("M-y" . consult-yank-pop)  ;; replaces `yank-pop'

         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)  ;; replaces `goto-line'
         ("M-g M-g" . consult-goto-line)  ;; replaces `goto-line'
         ("M-g o" . consult-outline)
         ("M-g a" . consult-org-agenda)
         ("M-g h" . consult-org-heading)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)

         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)

         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)  ;; replaces isearch-edit-string
         ("M-s e" . consult-isearch-history)  ;; replaces isearch-edit-string
         ("M-s l" . consult-line)  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)  ;; needed by consult-line to detect isearch

         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)  ;; replaces next-matching-history-element
         ("M-r" . consult-history))  ;; replaces previous-matching-history-element
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (setq consult-narrow-key "<"))
#+end_src

**** [[file:site-lisp/embark][embark]] mini-buffer actions

Embark provides ways to trigger commands based on the entity at point or the region, inside minibuffers and outside.

#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings)) ;; replaces `describe-bindings'
  :commands embark-prefix-help-command
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (add-to-list 'display-buffer-alist
               `(,(rx bos
                      "*Embark Collect "
                      (or "Live" "Completions")
                      "*")
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

This adds some extra integration between Embark and Consult.

#+begin_src emacs-lisp
(use-package embark-consult
  :after consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Text editing
*** [[file:site-lisp/trimspace-mode][trimspace-mode]] for trimming trailing spaces and newlines

~trimspace-mode~ sets things up so that when a file is opened, it enables deleting trailing whitespace and newlines before saving the file, unless the file when first opened already has traling whitespace of each type.

#+begin_src emacs-lisp
(use-package trimspace-mode
  :hook
  (prog-mode . trimspace-mode-unless-trailing-whitespace)
  (text-mode . trimspace-mode-unless-trailing-whitespace))
#+end_src

*** [[file:site-lisp/whole-line-or-region][whole-line-or-region]]

This module allows a number of functions to operate on the current line if no region is selected.

#+begin_src emacs-lisp
(use-package whole-line-or-region
  :config
  (whole-line-or-region-global-mode))
#+end_src

** Programming
*** [[file:site-lisp/eglot][eglot]] for language server protocol support

#+begin_src emacs-lisp
(use-package eglot
  :commands (eglot eglot-ensure)
  :config
  (bind-key "C-c l f" 'eglot-format eglot-mode-map)
  (bind-key "C-c l r" 'eglot-rename eglot-mode-map))
#+end_src

This enables the [[https://github.com/joaotavora/eglot][Eglot]] LSP client. This will usually require some additional per-project settings to work. As an example, for Python projects I tend to do soemthing like this:

+ install the Pip packages ~python-lsp-server[pylint]~,  ~pyls-black~ and ~pyls-isort~.
+ add a ~Makefile~ that lets me start an LSP in the correct environment with ~make lsp~.
+ have a ~.dir-locals.el~ file like the below example, which will:
  + set it to use the make target to start the LSP server.
  + make Eglot pass configuration to the LSP sever to enable Pylint.
  + use Eglot's formatting command to format buffers (with Black), before saving.
  + enable Eglot automatically when opening Python buffers.

#+begin_example emacs-lisp
((python-mode
  . ((eglot-server-programs . ((python-mode . ("make" "lsp"))))
     (eglot-workspace-configuration . ((:pyls
                                       . (:plugins (:pylint (:enabled t))))))
     (eval
      . (progn
          (add-hook 'before-save-hook #'eglot-format-buffer nil t)
          (eglot-ensure))))))
#+end_example

*** [[file:site-lisp/paredit][paredit]] for parenthetical editing

#+begin_src emacs-lisp
(use-package paredit
  :hook
  (paredit-mode . my/set-paredit-command-map)
  (lisp-mode . enable-paredit-mode)
  (emacs-lisp-mode . enable-paredit-mode)
  (lisp-interaction-mode . enable-paredit-mode)
  (eval-expression-minibuffer-setup . enable-paredit-mode)
  (ielm-mode . enable-paredit-mode)
  (scheme-mode . enable-paredit-mode)
  (fennel-mode . enable-paredit-mode)
  :config
  (defun my/set-paredit-command-map ()
    "unbind paredit bindings that make it less useful in command prompt modes"
    (when (derived-mode-p 'minibuffer-mode 'comint-mode)
      (let ((old (cdr (assoc 'paredit-mode minor-mode-map-alist)))
            (new (make-sparse-keymap)))
        (set-keymap-parent new old)
        (define-key new (kbd "RET") nil)
        (make-local-variable 'minor-mode-overriding-map-alist)
        (push `(paredit-mode . ,new) minor-mode-overriding-map-alist)))))
#+end_src

*** Programming languages and file formats
**** [[file:site-lisp/dockerfile-mode][dockerfile-mode]] for Dockerfile/Containerfile support

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode (rx (or "/" bos)
            (or "Container" "Docker") "file"
            (opt "." (*  (not (any "/"))))
            eos))
#+end_src

**** Emacs Lisp
***** [[file:site-lisp/xr][xr]] reverse rx

Helpful functions for refactoring regular expressions to ~rx~ expressions.

#+begin_src emacs-lisp
(use-package xr
  :commands (xr
             xr-pp
             xr-lint
             xr-skip-set
             xr-skip-set-pp
             xr-skip-set-lint
             xr-pp-rx-to-str))
#+end_src

**** [[file:site-lisp/fennel-mode][fennel-mode]]

#+begin_src emacs-lisp
(use-package fennel-mode
  :mode (rx ".fnl" eos)
  :init
  (defun my/add-fennel-prettify-symbols ()
    (setq prettify-symbols-alist '(("lambda" . ?λ))))
  :hook (fennel-mode . my/add-fennel-prettify-symbols))
#+end_src

**** [[file:site-lisp/gdscript-mode][gdscript-mode]] for Godot

#+begin_src emacs-lisp
(use-package gdscript-mode
  :mode (rx ".gd" eos)
  :init
  (defun my/add-gdscript-prettify-symbols ()
    (setq prettify-symbols-alist '(("->" . ?→))))
  :hook (gdscript-mode . my/add-gdscript-prettify-symbols))
#+end_src

**** [[file:site-lisp/go-mode][go-mode]]

#+begin_src emacs-lisp
(use-package go-mode
  :mode (rx (or (seq (or bos "/") "go.mod" eos)
                (seq ".go" eos)))
  :init
  (defun my/go-mode-add-hook-gofmt ()
    (add-hook 'after-save-hook 'gofmt nil t))
  :hook (go-mode . my/go-mode-add-hook-gofmt))
#+end_src

**** [[file:site-lisp/just-mode][just-mode]] for Justfile support

#+begin_src emacs-lisp
(use-package just-mode
  :mode (rx (or "/" bos)
            "Justfile"
            eos))
#+end_src

**** [[file:site-lisp/lua-mode][lua-mode]]

#+begin_src emacs-lisp
(use-package lua-mode
  :mode (rx ".lua" eos)
  :custom
  (lua-indent-level 4))
#+end_src

**** YAML
***** [[file:site-lisp/yaml-mode][yaml-mode]]

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode (rx ".y" (opt "a") "ml" eos)
  :hook (yaml-mode . flymake-mode))
#+end_src
***** [[file:flymake-yamllint][flymake-yamllint]]

#+begin_src emacs-lisp
(use-package flymake-yamllint
  :hook (flymake-mode . flymake-yamllint-setup))
#+end_src

** Version control
*** [[file:site-lisp/magit][magit]] Git integration
:PROPERTIES:
:CUSTOM_ID: magit
:END:

Load ~magit~, for working with Git.

#+begin_src emacs-lisp
(use-package magit
  :load-path "site-lisp/magit/lisp"
  :bind
  ("C-x g" . magit-status)

  :commands
  magit-call-git

  :custom
  (magit-push-always-verify nil)
  (git-commit-summary-max-length 50))
#+end_src

**** Automatic commit on save

Function to do automatic commit on save in certain repos. This is for use with for example ~org-mode~, to enable finding things after accidental changes.

#+begin_src emacs-lisp
(defun my/magic-commit-current-buffer ()
  (magit-call-git "add" buffer-file-name)
  (magit-call-git "commit"
                  "-m"
                  (format "Automatic commit on save of %s"
                          buffer-file-name))
  (magit-refresh))
#+end_src

To use this as an ~after-save-hook~ in a project, create a ~.dir-locals.el~ with something like this:

#+begin_example
((org-mode . ((eval . (add-hook
                       'after-save-hook
                       'my/magic-commit-current-buffer
                       nil t)))))
#+end_example

*** [[file:site-lisp/diff-hl][diff-hl]] to show uncommited changes in gutter

Shows changes that are not committed to the version control system for the file open in a buffer in the gutter.

#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode)
  (add-hook 'magit-pre-refresh-hook
            'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook
            'diff-hl-magit-post-refresh))

(use-package diff-hl-flydiff
  :config
  (diff-hl-flydiff-mode))
#+end_src

*** [[file:site-lisp/git-timemachine][git-timemachine]] file history browsing
:PROPERTIES:
:CUSTOM_ID: git-timemachine
:END:

#+begin_src emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+end_src

** Reading and writing
*** [[file:site-lisp/markdown-mode][markdown-mode]] for Markdown support

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (rx ".md" eos))
#+end_src

*** [[file:site-lisp/nov][nov]] for Epub reading
:PROPERTIES:
:CUSTOM_ID: nov
:END:

#+begin_src emacs-lisp
(use-package nov
  :custom
  (nov-text-width t)
  :mode ((rx ".epub" eos) . nov-mode)
  :config
  (add-hook 'nov-mode-hook 'olivetti-mode))
#+end_src

*** Org add-ons
**** [[file:site-lisp/org-modern][org-modern]] styling for Org mode

#+begin_src emacs-lisp
(use-package org-modern
  :config
  (dolist (face '(org-modern-symbol org-modern-label))
    (set-face-attribute face nil :family my/fixed-pitch-font-family))
  (global-org-modern-mode))
#+end_src

**** [[file:site-lisp/org-present][org-present]] presentation mode for Org files

#+begin_src emacs-lisp
(defun my/set-fullscreen (fullscreen)
  "If fullscreen is non-nil, set fullscreen mode if not already enabled. If it is nil, leave fullscreen if it is enabled."
  (when (xor fullscreen
             (memq (frame-parameter nil 'fullscreen)
                   '(fullscreen fullboth)))
    (toggle-frame-fullscreen)))

(use-package org-present
  :custom
  (org-present-text-scale 7)
  :config
  (defun my/org-present-edit ()
    (interactive)
    (org-present-show-cursor)
    (org-present-read-write))
  (defun my/org-present-read-only ()
    (interactive)
    (org-present-hide-cursor)
    (org-present-read-only))
  (add-hook 'org-present-mode-hook
            (defun my/org-present-start ()
              (org-present-big)
              (org-display-inline-images)
              (org-present-hide-cursor)
              (org-present-read-only)
              (hide-mode-line-mode)
              (my/set-fullscreen t)))
  (add-hook 'org-present-mode-quit-hook
            (defun my/org-present-reset ()
              (org-present-small)
              (org-remove-inline-images)
              (org-present-show-cursor)
              (org-present-read-write)
              (hide-mode-line-mode -1)
              (my/set-fullscreen nil)))
  :bind (:map org-present-mode-keymap
              ("C-c C-e" . my/org-present-edit)
              ("C-c C-r" . my/org-present-read-only))
  :commands org-present)
#+end_src
